{"ast":null,"code":"var _jsxFileName = \"F:\\\\Users\\\\acharbash160192\\\\Documents\\\\React\\\\treegit\\\\fe\\\\src\\\\components\\\\Shape.jsx\";\nimport * as React from 'react';\nimport Konva from 'konva';\nimport { Arrow, Line, Stage, Layer, Circle, Text } from 'react-konva'; // constants\n// =========\n\nconst radius = 20; // input from json\n// ===============\n\nconst dataIn = {\n  allUserNames: ['Ariel Vaknin', 'Michael Farjon'],\n  nodes: [{\n    id: 1,\n    user_name: 'Ariel Vaknin',\n    date: '19/3/2018',\n    message: 'message 1'\n  }, {\n    id: 2,\n    user_name: 'Ariel Vaknin',\n    date: '11/1/2019',\n    message: 'message 2'\n  }, {\n    id: 3,\n    user_name: 'Michael Farjon',\n    date: '8/2/2019',\n    message: 'message 3'\n  }, {\n    id: 4,\n    user_name: 'Ariel Vaknin',\n    date: '1/4/2019',\n    message: 'message 4'\n  }],\n  edges: [[1, 2], [2, 3], [3, 4], [2, 4]]\n}; // parse data\n// ==========\n// [rows, cols] = parseData(dataIn);\n//   const firstRow = 100;\n//   const rows = []\n\nconst rows = [100, 200, 300, 400];\nconst cols = [500, 600, 700];\nvar usersToColumns = {};\ndataIn.allUserNames = dataIn.allUserNames.concat(['Messages']);\ndataIn.allUserNames.forEach((key, i) => usersToColumns[key] = cols[i]); // function nodeById(data) { \n//   return data.id === 3;\n// }\n// console.log(dataIn.nodes.find(nodeById).user_name)\n// function userById(data, id) {\n//   return data.find(nodeById(id)).user_name\n// }\n\nvar num = 2;\nconst result = dataIn.nodes.find(node => node.id === num).user_name;\nconsole.log(result);\nvar arrows = [];\nvar i = 0;\n\nfor (i; i < dataIn.edges.length; i++) {\n  //  console.log(usersToColumns[userById(dataIn.nodes, dataIn.edges[i][0])])\n  // console.log(arrows)\n  // console.log(arrows)\n  var user_name_1 = dataIn.nodes.find(node => node.id === dataIn.edges[i][0]).user_name;\n  var user_name_2 = dataIn.nodes.find(node => node.id === dataIn.edges[i][1]).user_name;\n  arrows[i] = {};\n  arrows[i].x1 = usersToColumns[user_name_1];\n  arrows[i].y1 = rows[i][1];\n  arrows[i].x2 = usersToColumns[user_name_2];\n  arrows[i].y2 = rows[i][2];\n}\n\nconsole.log(arrows); // const arrows = [\n//   { x1: 500 , y1: 100, x2: 500, y2: 200 },\n//   { x1: 500 , y1: 200, x2: 600, y2: 300 },\n//   { x1: 600 , y1: 300, x2: 500, y2: 400 },\n//   { x1: 500 , y1: 200, x2: 500, y2: 400 },\n// ]\n// console.log(arrows)\n\nexport class Shape extends React.Component {\n  render() {\n    console.log(window.innerWidth);\n    console.log(window.innerHeight);\n    return React.createElement(Stage, {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, dataIn.nodes.map((item, ind) => React.createElement(Circle, {\n      key: item.id,\n      x: usersToColumns[item.user_name],\n      y: rows[ind],\n      numPoints: 5,\n      Radius: radius,\n      fill: \"#89b717\",\n      opacity: 0.2,\n      shadowColor: \"black\",\n      shadowBlur: 10,\n      shadowOpacity: 0.6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }))), React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, dataIn.nodes.map((item, ind) => React.createElement(Text, {\n      text: item.id,\n      x: usersToColumns[item.user_name] - 5,\n      y: rows[ind] - 10,\n      fontSize: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }))), React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, Object.keys(usersToColumns).map((user, ind) => // console.log(`user: ${user}, location: ${usersToColumns[user]}`);\n    React.createElement(Text, {\n      text: user,\n      x: usersToColumns[user] - 50,\n      y: 0,\n      wrap: \"char\",\n      align: \"center\",\n      width: 70,\n      fontSize: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }))), React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, dataIn.nodes.map((item, ind) => React.createElement(Text, {\n      text: \"\".concat(item.message, \" \").concat(item.date),\n      x: usersToColumns['Messages'],\n      y: rows[ind] - 10,\n      fontSize: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }))), React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, arrows.map(item => React.createElement(Arrow, {\n      points: [item.x1, item.y1 + radius, item.x2, item.y2 - radius],\n      stroke: \"red\",\n      tension: 1,\n      pointerLength: 10,\n      pointerWidth: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["F:\\Users\\acharbash160192\\Documents\\React\\treegit\\fe\\src\\components\\Shape.jsx"],"names":["React","Konva","Arrow","Line","Stage","Layer","Circle","Text","radius","dataIn","allUserNames","nodes","id","user_name","date","message","edges","rows","cols","usersToColumns","concat","forEach","key","i","num","result","find","node","console","log","arrows","length","user_name_1","user_name_2","x1","y1","x2","y2","Shape","Component","render","window","innerWidth","innerHeight","map","item","ind","Object","keys","user"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Konva from 'konva';\nimport { Arrow, Line, Stage, Layer, Circle, Text } from 'react-konva';\n\n// constants\n// =========\nconst radius = 20;\n\n// input from json\n// ===============\nconst dataIn = {\n  allUserNames: ['Ariel Vaknin', 'Michael Farjon'],\n  nodes: [\n    { id: 1, user_name: 'Ariel Vaknin', date: '19/3/2018', message: 'message 1' },\n    { id: 2, user_name: 'Ariel Vaknin', date: '11/1/2019', message: 'message 2' },\n    { id: 3, user_name: 'Michael Farjon', date: '8/2/2019', message: 'message 3' },\n    { id: 4, user_name: 'Ariel Vaknin', date: '1/4/2019', message: 'message 4' }\n  ],\n  edges: [[1,2], [2,3], [3,4], [2,4]], \n};\n\n// parse data\n// ==========\n// [rows, cols] = parseData(dataIn);\n//   const firstRow = 100;\n//   const rows = []\n\nconst rows = [100, 200, 300, 400];\nconst cols = [500, 600, 700];\n\nvar usersToColumns = {};\ndataIn.allUserNames = dataIn.allUserNames.concat(['Messages'])\ndataIn.allUserNames.forEach((key, i) => usersToColumns[key] = cols[i]);\n\n// function nodeById(data) { \n//   return data.id === 3;\n// }\n\n// console.log(dataIn.nodes.find(nodeById).user_name)\n\n\n// function userById(data, id) {\n//   return data.find(nodeById(id)).user_name\n// }\n\n\nvar num = 2;\nconst result = dataIn.nodes.find( node => node.id === num ).user_name;\nconsole.log(result)\n\nvar arrows = [];\nvar i = 0\nfor (i ; i < dataIn.edges.length; i++) {\n  //  console.log(usersToColumns[userById(dataIn.nodes, dataIn.edges[i][0])])\n  // console.log(arrows)\n  // console.log(arrows)\n\n  var user_name_1 = dataIn.nodes.find( node => node.id === dataIn.edges[i][0] ).user_name;\n  var user_name_2 = dataIn.nodes.find( node => node.id === dataIn.edges[i][1] ).user_name;\n\n\n  arrows[i] = {};\n  arrows[i].x1 = usersToColumns[user_name_1]\n  arrows[i].y1 = rows[i][1]\n  arrows[i].x2 = usersToColumns[user_name_2]\n  arrows[i].y2 = rows[i][2]\n}\nconsole.log(arrows)\n\n// const arrows = [\n//   { x1: 500 , y1: 100, x2: 500, y2: 200 },\n//   { x1: 500 , y1: 200, x2: 600, y2: 300 },\n//   { x1: 600 , y1: 300, x2: 500, y2: 400 },\n//   { x1: 500 , y1: 200, x2: 500, y2: 400 },\n// ]\n// console.log(arrows)\n\n\nexport class Shape extends React.Component {\n  render() {\n      console.log(window.innerWidth);\n      console.log(window.innerHeight);\n    return (\n      <Stage width={ window.innerWidth } height={ window.innerHeight }>\n        <Layer>\n          {dataIn.nodes.map((item, ind) => (\n              <Circle\n                key={item.id}\n                x={usersToColumns[item.user_name]}\n                y={rows[ind]}\n                numPoints={5}\n                Radius={radius}\n                fill=\"#89b717\"\n                opacity={0.2}\n                shadowColor=\"black\"\n                shadowBlur={10}\n                shadowOpacity={0.6}\n              />\n          ))}\n        </Layer>\n        <Layer>\n          {dataIn.nodes.map((item, ind) => (\n              <Text \n                text={item.id}\n                x={usersToColumns[item.user_name] - 5}\n                y={rows[ind] - 10}\n                fontSize='20'\n              />\n          ))}\n        </Layer>\n        <Layer>{ \n          Object.keys(usersToColumns).map( (user, ind) => (\n            // console.log(`user: ${user}, location: ${usersToColumns[user]}`);\n            <Text \n              text={user}\n              x={usersToColumns[user] - 50}\n              y={0}\n              wrap=\"char\"\n              align=\"center\"\n              width={70}\n              fontSize='20'\n            /> \n          ))}\n        </Layer>\n        <Layer>\n          {dataIn.nodes.map((item, ind) => (\n              <Text \n                text={`${item.message} ${item.date}`}\n                x={usersToColumns['Messages']}\n                y={rows[ind] - 10}\n                fontSize='20'\n              />\n          ))}\n        </Layer>\n        <Layer>\n          {arrows.map( item => (\n              <Arrow \n                points={ [item.x1, item.y1 + radius, item.x2, item.y2 - radius] }\n                stroke='red'\n                tension={1}\n                pointerLength={10}\n                pointerWidth={12}\n            />\n          ))}\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}