{"ast":null,"code":"var _jsxFileName = \"F:\\\\Users\\\\acharbash160192\\\\Documents\\\\React\\\\treegit\\\\fe\\\\src\\\\components\\\\Shape.jsx\";\nimport * as React from 'react';\nimport Konva from 'konva';\nimport { Arrow, Line, Stage, Layer, Circle, Text } from 'react-konva'; // constants\n// =========\n\nconst radius = 20; // input from json\n// ===============\n\nconst dataIn = {\n  all_user_names: ['Ariel Vaknin', 'Michael Farjon'],\n  nodes: [{\n    id: 1,\n    user_name: 'Ariel Vaknin',\n    category: 'message 1'\n  }, {\n    id: 2,\n    user_name: 'Ariel Vaknin',\n    category: 'message 2'\n  }, {\n    id: 3,\n    user_name: 'Michael Farjon',\n    category: 'message 3'\n  }, {\n    id: 4,\n    user_name: 'Ariel Vaknin',\n    category: 'message 4'\n  }],\n  edges: [[1, 2], [2, 3], [3, 4], [2, 4]]\n}; // parse data\n// ==========\n\nfunction parseRowsLocation(dataIn) {\n  const rowSpacing = 100;\n  const rows1 = Array(dataIn.nodes.length);\n  let rows = [];\n\n  for (let i = 0; i < rows1.length; i++) {\n    rows[i] = (i + 1) * rowSpacing;\n  } // console.log(`rows: ${rows}`);\n\n\n  return rows;\n}\n\nfunction parseColLocation(dataIn) {\n  const colSpacing = 100;\n  const cols1 = Array(dataIn.all_user_names.length + 1);\n  let cols = [];\n\n  for (let i = 0; i < cols1.length; i++) {\n    cols[i] = (i + 5) * colSpacing;\n  } // console.log(`cols: ${cols}`);\n\n\n  return cols;\n}\n\nconst rows = parseRowsLocation(dataIn);\nconst cols = parseColLocation(dataIn);\nlet usersToColumns = {};\ndataIn.all_user_names = dataIn.all_user_names.concat(['Messages']);\ndataIn.all_user_names.forEach((key, i) => usersToColumns[key] = cols[i]);\nlet arrows = [];\nlet i = 0;\n\nfor (i; i < dataIn.edges.length; i++) {\n  const user_name_1 = dataIn.nodes.find(node => node.id === dataIn.edges[i][0]).user_name;\n  const user_name_2 = dataIn.nodes.find(node => node.id === dataIn.edges[i][1]).user_name;\n  arrows[i] = {};\n  arrows[i].x1 = usersToColumns[user_name_1];\n  arrows[i].y1 = rows[dataIn.edges[i][0] - 1];\n  arrows[i].x2 = usersToColumns[user_name_2];\n  arrows[i].y2 = rows[dataIn.edges[i][1] - 1];\n}\n\nexport class Shape extends React.Component {\n  render() {\n    console.log(window.innerWidth);\n    console.log(window.innerHeight);\n    return React.createElement(Stage, {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, dataIn.nodes.map((item, ind) => React.createElement(Circle, {\n      key: item.id,\n      x: usersToColumns[item.user_name],\n      y: rows[ind],\n      numPoints: 5,\n      Radius: radius,\n      fill: \"#89b717\",\n      opacity: 0.2,\n      shadowColor: \"black\",\n      shadowBlur: 10,\n      shadowOpacity: 0.6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }))), React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, dataIn.nodes.map((item, ind) => React.createElement(Text, {\n      text: item.id,\n      x: usersToColumns[item.user_name] - 5,\n      y: rows[ind] - 10,\n      fontSize: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }))), React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, Object.keys(usersToColumns).map((user, ind) => // console.log(`user: ${user}, location: ${usersToColumns[user]}`);\n    React.createElement(Text, {\n      text: user,\n      x: usersToColumns[user] - 50,\n      y: 0,\n      wrap: \"char\",\n      align: \"center\",\n      width: 70,\n      fontSize: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }))), React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, dataIn.nodes.map((item, ind) => React.createElement(Text, {\n      text: \"\".concat(item.category),\n      x: usersToColumns['Messages'],\n      y: rows[ind] - 10,\n      fontSize: \"20\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }))), React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, arrows.map(item => React.createElement(Arrow, {\n      points: [item.x1, item.y1 + radius, item.x2, item.y2 - radius],\n      stroke: \"red\",\n      tension: 1,\n      pointerLength: 10,\n      pointerWidth: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["F:\\Users\\acharbash160192\\Documents\\React\\treegit\\fe\\src\\components\\Shape.jsx"],"names":["React","Konva","Arrow","Line","Stage","Layer","Circle","Text","radius","dataIn","all_user_names","nodes","id","user_name","category","edges","parseRowsLocation","rowSpacing","rows1","Array","length","rows","i","parseColLocation","colSpacing","cols1","cols","usersToColumns","concat","forEach","key","arrows","user_name_1","find","node","user_name_2","x1","y1","x2","y2","Shape","Component","render","console","log","window","innerWidth","innerHeight","map","item","ind","Object","keys","user"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Konva from 'konva';\nimport { Arrow, Line, Stage, Layer, Circle, Text } from 'react-konva';\n\n// constants\n// =========\nconst radius = 20;\n\n// input from json\n// ===============\nconst dataIn = {\n  all_user_names: ['Ariel Vaknin', 'Michael Farjon'],\n  nodes: [\n    { id: 1, user_name: 'Ariel Vaknin', category: 'message 1' },\n    { id: 2, user_name: 'Ariel Vaknin', category: 'message 2' },\n    { id: 3, user_name: 'Michael Farjon', category: 'message 3' },\n    { id: 4, user_name: 'Ariel Vaknin', category: 'message 4' }\n  ],\n  edges: [[1,2], [2,3], [3,4], [2,4]], \n};\n\n// parse data\n// ==========\nfunction parseRowsLocation(dataIn){\n  const rowSpacing = 100;\n  const rows1 = Array(dataIn.nodes.length);\n  let rows = []\n\n  for (let i = 0; i< rows1.length; i++) {\n    rows[i] = (i+1)*rowSpacing;\n  }\n\n  // console.log(`rows: ${rows}`);\n  return rows\n}\n\nfunction parseColLocation(dataIn){\n  const colSpacing = 100;\n  const cols1 = Array(dataIn.all_user_names.length + 1);\n  let cols = []\n\n  for (let i = 0; i< cols1.length; i++) {\n    cols[i] = (i+5)*colSpacing;\n  }\n  // console.log(`cols: ${cols}`);\n  return cols;\n}\n  \nconst rows = parseRowsLocation(dataIn);\nconst cols = parseColLocation(dataIn);\n\nlet usersToColumns = {};\ndataIn.all_user_names = dataIn.all_user_names.concat(['Messages'])\ndataIn.all_user_names.forEach((key, i) => usersToColumns[key] = cols[i]);\n\nlet arrows = [];\nlet i = 0\nfor (i ; i < dataIn.edges.length; i++) {\n  \n  const user_name_1 = dataIn.nodes.find( node => node.id === dataIn.edges[i][0] ).user_name;\n  const user_name_2 = dataIn.nodes.find( node => node.id === dataIn.edges[i][1] ).user_name;\n\n  arrows[i] = {};\n  arrows[i].x1 = usersToColumns[user_name_1]\n  arrows[i].y1 = rows[dataIn.edges[i][0]-1]\n  arrows[i].x2 = usersToColumns[user_name_2]\n  arrows[i].y2 = rows[dataIn.edges[i][1]-1]\n}\n\nexport class Shape extends React.Component {\n  render() {\n      console.log(window.innerWidth);\n      console.log(window.innerHeight);\n    return (\n      <Stage width={ window.innerWidth } height={ window.innerHeight }>\n        <Layer>\n          {dataIn.nodes.map((item, ind) => (\n              <Circle\n                key={item.id}\n                x={usersToColumns[item.user_name]}\n                y={rows[ind]}\n                numPoints={5}\n                Radius={radius}\n                fill=\"#89b717\"\n                opacity={0.2}\n                shadowColor=\"black\"\n                shadowBlur={10}\n                shadowOpacity={0.6}\n              />\n          ))}\n        </Layer>\n        <Layer>\n          {dataIn.nodes.map((item, ind) => (\n              <Text \n                text={item.id}\n                x={usersToColumns[item.user_name] - 5}\n                y={rows[ind] - 10}\n                fontSize='20'\n              />\n          ))}\n        </Layer>\n        <Layer>{ \n          Object.keys(usersToColumns).map( (user, ind) => (\n            // console.log(`user: ${user}, location: ${usersToColumns[user]}`);\n            <Text \n              text={user}\n              x={usersToColumns[user] - 50}\n              y={0}\n              wrap=\"char\"\n              align=\"center\"\n              width={70}\n              fontSize='20'\n            /> \n          ))}\n        </Layer>\n        <Layer>\n          {dataIn.nodes.map((item, ind) => (\n              <Text \n                text={`${item.category}`}\n                x={usersToColumns['Messages']}\n                y={rows[ind] - 10}\n                fontSize='20'\n              />\n          ))}\n        </Layer>\n        <Layer>\n          {arrows.map( item => (\n              <Arrow \n                points={ [item.x1, item.y1 + radius, item.x2, item.y2 - radius] }\n                stroke='red'\n                tension={1}\n                pointerLength={10}\n                pointerWidth={12}\n            />\n          ))}\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}